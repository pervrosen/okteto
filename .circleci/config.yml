version: 2.1
orbs:
  aws-s3: circleci/aws-s3@1.0.6
  win: circleci/windows@2.1.0
jobs:
  build:
    docker:
      - image: circleci/golang:1.14
    steps:
      - checkout
      - restore_cache: 
          keys:
            - v3-pkg-cache-{{ checksum "go.sum" }}
      - run: 
          name: test
          environment:
            SCOPE_DSN: "https://fb562aaa137b41e69058a1b1774ae63e@app.scope.dev/"
          command: |
            make test
            bash <(curl -s https://codecov.io/bash)
      - run: env VERSION_STRING=$CIRCLE_TAG make -j 3 build-all
      - run: env VERSION_STRING=$CIRCLE_TAG make latest
      - persist_to_workspace:
          root: .
          paths:
            - bin
      - save_cache:
          key: v3-pkg-cache-{{ checksum "go.sum" }}
          paths:
            - ~/.cache/go-build
            - /go/pkg
      - store_artifacts:
          path: bin
          destination: binaries
      - store_artifacts:
          path: coverage.txt
          destination: coverage.txt
  integration:
    environment: 
      OKTETO_USER: cindylopez
    docker:
      - image: okteto/dev:latest
    steps:
      - checkout
      - restore_cache: 
          keys:
            - v3-pkg-cache-{{ checksum "go.sum" }}
      - attach_workspace:
          at: ./artifacts
      - run:
          name: prepare env
          command: |
            mkdir -p $HOME/.okteto
            touch $HOME/.okteto/.noanalytics
            echo $HOME
            curl -L "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl" -o /usr/local/bin/kubectl
            chmod +x /usr/local/bin/kubectl
            cp $(pwd)/artifacts/bin/okteto-Linux-x86_64 /usr/local/bin/okteto
            /usr/local/bin/okteto login --token ${API_TOKEN}
      - run: 
          name: integration tests (serverside)
          command: |
            unset OKTETO_CLIENTSIDE_TRANSLATION
            make integration
      - run: 
          name: integration tests (clientside)
          command: |
            export OKTETO_CLIENTSIDE_TRANSLATION=true
            make integration
      - save_cache:
          key: v3-pkg-cache-{{ checksum "go.sum" }}
          paths:
            - ~/.cache/go-build
            - /go/pkg
      - store_artifacts:
          path: /root/.okteto        
  mock-publish-github-release:
    docker:
      - image: circleci/golang:1.14
    steps:
      - checkout
      - attach_workspace:
          at: ./artifacts
      - deploy:
          name: "Update brew formula"
          command: |
            sha=$(cat ./artifacts/bin/okteto-Darwin-x86_64.sha256 | awk '{print $1}')
            ./update_homebrew_formula.sh 0.0.1 $sha
  windows-unit:
    environment: 
      OKTETO_USER: cindylopez
    executor: win/default
    steps: 
      - checkout
      - restore_cache: 
          keys:
            - v4-pkg-cache-windows-{{ checksum "go.sum" }}
      - run: 
          name: upgrade golang
          command: choco upgrade golang
      - run: 
          name: test
          command: |
            go version
            go test ./...
      - run: 
          name: upgrade kubectl
          command: choco install kubernetes-cli
      - attach_workspace:
          at: .\artifacts
      - run:
          name: prepare env
          command: |
            new-item $HOME\.okteto -itemtype "directory" -force
            new-item $HOME\.okteto\.noanalytics -itemtype "file" -value "noanalytics" -force
            & 'C:\Users\circleci\project\artifacts\bin\okteto.exe' login --token $env:API_TOKEN
      - run: 
          name: integration tests (serverside)
          environment: 
            OKTETO_PATH: 'C:\Users\circleci\project\artifacts\bin\okteto.exe'
          command: |
            go test github.com/okteto/okteto/integration -tags=integration --count=1 -v
      - run: 
          name: integration tests (clientside)
          environment: 
            OKTETO_PATH: 'C:\Users\circleci\project\artifacts\bin\okteto.exe'
            OKTETO_CLIENTSIDE_TRANSLATION: 'true'
          command: |
            go test github.com/okteto/okteto/integration -tags=integration --count=1 -v
      - save_cache:
          key: v4-pkg-cache-windows-{{ checksum "go.sum" }}
          paths:
            - C:\Users\circleci\AppData\Local\go-build
            - C:\Users\circleci\go\pkg
            - C:\Go\pkg
  release:
    docker:
      - image: circleci/golang:1.14
    steps:
      - checkout
      - attach_workspace:
          at: ./artifacts
      - aws-s3/sync:
          from: ./artifacts/bin
          to: "s3://downloads.okteto.com/cli"
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_REGION
          arguments: |
            --acl public-read \
            --metadata version=${CIRCLE_TAG} \
            --cache-control "max-age=86400" \
            --exclude "*.*.*/" \
      - aws-s3/sync:
          from: ./artifacts/bin
          to: "s3://downloads.okteto.com/cli/${CIRCLE_TAG}"
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_REGION
          arguments: |
            --acl public-read \
            --metadata version=${CIRCLE_TAG} \
            --cache-control "max-age=86400" \
          overwrite: false
      - setup_remote_docker:
          version: "19.03.8"
      - run:  
          name: "Publish Docker container"
          command: |
            export DOCKER_BUILDKIT=1
            echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
            docker build -t okteto/okteto:${CIRCLE_TAG} --build-arg VERSION_STRING=$CIRCLE_TAG .
            docker push okteto/okteto:${CIRCLE_TAG}
      - run:
          name: "Publish Release on GitHub"
          command: |
            go get -u github.com/tcnksm/ghr
            ghr -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -token $GITHUB_TOKEN -replace $CIRCLE_TAG  ./artifacts/bin/
      - deploy:
          name: "Update brew formula"
          command: |
            sha=$(cat ./artifacts/bin/okteto-Darwin-x86_64.sha256 | awk '{print $1}')
            ./update_homebrew_formula.sh $CIRCLE_TAG $sha
            pushd homebrew-cli
            git push https://${GITHUB_TOKEN}@github.com/okteto/homebrew-okteto.git master
  release-master:
    docker:
      - image: circleci/golang:1.14
    steps:
      - checkout
      - setup_remote_docker:
          version: "19.03.8"
      - run:  
          name: "Publish Docker container"
          command: |
            export DOCKER_BUILDKIT=1
            echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
            docker build -t okteto/okteto:latest --build-arg VERSION_STRING=$CIRCLE_SHA1 .
            docker push okteto/okteto:latest
      - attach_workspace:
          at: ./artifacts
      - aws-s3/sync:
          from: ./artifacts/bin
          to: "s3://downloads.okteto.com/cli/master"
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_REGION
          arguments: |
            --acl public-read \
            --metadata version=${CIRCLE_SHA1}
workflows:
  version: 2
  build-release:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - integration:
          requires:
            - build
          filters:
            branches:
              only: 
                - master
                - /.*(e2e)/
      - release-master:
          requires:
            - integration
          filters:
            branches:
              only: master
      - mock-publish-github-release:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - release:
          requires:
            - build
          filters:
            tags:
              only: /^\d+\.\d+\.\d+$/
            branches:
              ignore: /.*/
      - windows-unit:
          requires:
            - build
          filters:
            branches:
              only: 
                - master
                - /.*(windows)/